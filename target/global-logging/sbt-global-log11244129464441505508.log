[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\cakdeniz\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\cakdeniz\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.8 (Oracle Corporation Java 11.0.15)
[debug]       Load.loadUnit: plugins took 343.1677ms
[debug]       Load.loadUnit: defsScala took 0.9825ms
[debug] [Loading] Scanning directory C:\Users\cakdeniz\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\cakdeniz\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 56.3038 ms
[debug]           Load.resolveProject(global-plugins) took 136.5934ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\cakdeniz\.sbt\1.0\plugins, plugins: List(<none>))) took 280.8064ms
[debug] [Loading] Done in C:\Users\cakdeniz\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 352.0816ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.7582ms
[debug]     Load.loadUnit(file:/C:/Users/cakdeniz/.sbt/1.0/plugins/, ...) took 723.9831ms
[debug]   Load.apply: load took 1182.8305ms
[debug]   Load.apply: resolveProjects took 14.8487ms
[debug]   Load.apply: finalTransforms took 169.4628ms
[debug]   Load.apply: config.delegates took 20.644ms
[debug]   Load.apply: Def.make(settings)... took 1059.1187ms
[debug]   Load.apply: structureIndex took 290.1705ms
[debug]   Load.apply: mkStreams took 4.7171ms
[info] loading global plugins from C:\Users\cakdeniz\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 13412.9916ms
[debug]           Load.loadUnit: plugins took 68.7911ms
[debug]           Load.loadUnit: defsScala took 0.0053ms
[debug] [Loading] Scanning directory C:\Users\cakdeniz\Desktop\projects\java\spark-scala\project
[debug]             Load.loadUnit: mkEval took 12.065ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\cakdeniz\Desktop\projects\java\spark-scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.7118 ms
[info] loading settings for project spark-scala-build from idea.sbt ...
[debug]               Load.resolveProject(spark-scala-build) took 32.179ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-scala-build, base: C:\Users\cakdeniz\Desktop\projects\java\spark-scala\project, plugins: List(<none>))) took 37.9672ms
[debug] [Loading] Done in C:\Users\cakdeniz\Desktop\projects\java\spark-scala\project, returning: (spark-scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 7028.7008ms
[debug]           Load.loadUnit: cleanEvalClasses took 20.7061ms
[debug]         Load.loadUnit(file:/C:/Users/cakdeniz/Desktop/projects/java/spark-scala/project/, ...) took 7120.8808ms
[debug]       Load.apply: load took 7125.1029ms
[debug]       Load.apply: resolveProjects took 0.2832ms
[debug]       Load.apply: finalTransforms took 28.5244ms
[debug]       Load.apply: config.delegates took 1.0236ms
[debug]       Load.apply: Def.make(settings)... took 207.7451ms
[debug]       Load.apply: structureIndex took 65.8706ms
[debug]       Load.apply: mkStreams took 0.006ms
[info] loading project definition from C:\Users\cakdeniz\Desktop\projects\java\spark-scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 10959.2879ms
[debug]     Load.loadUnit: defsScala took 0.0126ms
[debug] [Loading] Scanning directory C:\Users\cakdeniz\Desktop\projects\java\spark-scala
[debug]       Load.loadUnit: mkEval took 0.8963ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 7.8015 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 139.3365ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\cakdeniz\Desktop\projects\java\spark-scala, plugins: List(<none>))) took 153.4274ms
[debug] [Loading] Done in C:\Users\cakdeniz\Desktop\projects\java\spark-scala, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4698.1213ms
[debug]     Load.loadUnit: cleanEvalClasses took 49.6624ms
[debug]   Load.loadUnit(file:/C:/Users/cakdeniz/Desktop/projects/java/spark-scala/, ...) took 15708.8566ms
[debug] Load.apply: load took 15714.1896ms
[debug] Load.apply: resolveProjects took 0.2886ms
[debug] Load.apply: finalTransforms took 86.7142ms
[debug] Load.apply: config.delegates took 0.5937ms
[debug] Load.apply: Def.make(settings)... took 193.3227ms
[debug] Load.apply: structureIndex took 72.5491ms
[debug] Load.apply: mkStreams took 0.006ms
[info] set current project to spark-scala (in build file:/C:/Users/cakdeniz/Desktop/projects/java/spark-scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 54164 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 54164, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to spark-scala (in build file:/C:/Users/cakdeniz/Desktop/projects/java/spark-scala/)
[debug] > Exec(idea-shell, None, None)
