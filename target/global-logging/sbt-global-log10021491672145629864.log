[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\cnk_a\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\cnk_a\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.8 (Oracle Corporation Java 18.0.1.1)
[debug] Load.defaultLoad until apply took 158.6777ms
[debug]           Load.loadUnit: plugins took 114.2672ms
[debug]           Load.loadUnit: defsScala took 0.3637ms
[debug] [Loading] Scanning directory C:\Users\cnk_a\Desktop\PROJECTS\java\spark-scala\project
[debug]             Load.loadUnit: mkEval took 8.5199ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\cnk_a\Desktop\PROJECTS\java\spark-scala\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 22.0382 ms
[info] loading settings for project spark-scala-build from idea.sbt ...
[debug]               Load.resolveProject(spark-scala-build) took 38.5701ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-scala-build, base: C:\Users\cnk_a\Desktop\PROJECTS\java\spark-scala\project, plugins: List(<none>))) took 69.4968ms
[debug] [Loading] Done in C:\Users\cnk_a\Desktop\PROJECTS\java\spark-scala\project, returning: (spark-scala-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2897.2302ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.9951ms
[debug]         Load.loadUnit(file:/C:/Users/cnk_a/Desktop/PROJECTS/java/spark-scala/project/, ...) took 3025.2075ms
[debug]       Load.apply: load took 3194.7644ms
[debug]       Load.apply: resolveProjects took 3.9951ms
[debug]       Load.apply: finalTransforms took 64.0372ms
[debug]       Load.apply: config.delegates took 7.6956ms
[debug]       Load.apply: Def.make(settings)... took 411.1276ms
[debug]       Load.apply: structureIndex took 113.7618ms
[debug]       Load.apply: mkStreams took 2.1113ms
[info] loading project definition from C:\Users\cnk_a\Desktop\PROJECTS\java\spark-scala\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 5586.5889ms
[debug]     Load.loadUnit: defsScala took 0.0027ms
[debug] [Loading] Scanning directory C:\Users\cnk_a\Desktop\PROJECTS\java\spark-scala
[debug]       Load.loadUnit: mkEval took 0.1853ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.9422 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 25.8341ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\cnk_a\Desktop\PROJECTS\java\spark-scala, plugins: List(<none>))) took 29.0422ms
[debug] [Loading] Done in C:\Users\cnk_a\Desktop\PROJECTS\java\spark-scala, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1507.9653ms
[debug]     Load.loadUnit: cleanEvalClasses took 15.2415ms
[debug]   Load.loadUnit(file:/C:/Users/cnk_a/Desktop/PROJECTS/java/spark-scala/, ...) took 7111.7104ms
[debug] Load.apply: load took 7137.2986ms
[debug] Load.apply: resolveProjects took 0.2127ms
[debug] Load.apply: finalTransforms took 26.6875ms
[debug] Load.apply: config.delegates took 0.4546ms
[debug] Load.apply: Def.make(settings)... took 114.7261ms
[debug] Load.apply: structureIndex took 34.0763ms
[debug] Load.apply: mkStreams took 0.0022ms
[info] set current project to spark-scala (in build file:/C:/Users/cnk_a/Desktop/PROJECTS/java/spark-scala/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62005 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62005, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to spark-scala (in build file:/C:/Users/cnk_a/Desktop/PROJECTS/java/spark-scala/)
[debug] > Exec(idea-shell, None, None)
[debug] > Exec(, None, None)
[debug] > Exec(idea-shell, None, None)
